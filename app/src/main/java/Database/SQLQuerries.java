package Database;

import java.util.ArrayList;

/**
 * Created by fgrabscheit on 03.05.2017.
 */

public class SQLQuerries {

    protected static final String createTableBenutzer =    "CREATE TABLE Benutzer (" +
                                                        "Name TEXT PRIMARY KEY NOT NULL)";

    protected static final String createTableAufgabe =     "CREATE TABLE Aufgabe ( " +
                                                        "ID INT PRIMARY KEY NOT NULL, " +
                                                        "Schwierigkeitsgrad TEXT NOT NULL, " +
                                                        "Aufgabenstellung TEXT NOT NULL, " +
                                                        "Hilfe TEXT" +
                                                        ")";

    /*
    Die Tabelle Aufagebzustand hat in der Spalte Status. Drei mögliche Werte
    Offen --> Noch nicht bearbeitet.
    Richtig --> Mindestens 1 mal korrekt gelöst.
    Falsch --> Mindestens 1 mal falsch gelöst.
     */

    protected static final String createTableAufgabenzustand =     "CREATE TABLE Aufgabenzustand ( " +
                                                                "ID INT PRIMARY KEY NOT NULL, " +
                                                                "Status TEXT NOT NULL, " +
                                                                "Anzahl_der_Bearbeitungen INT NOT NULL, " +
                                                                "Benutzername TEXT NOT NULL, " +
                                                                "FOREIGN KEY(Benutzername) REFERENCES Benutzer(Name)" +
                                                                ")";

    protected static final String createTableRelationenschema =        "CREATE TABLE Relationenschema ( " +
                                                                    "ID INT PRIMARY KEY NOT NULL, " +
                                                                    "Relationennummer TEXT NOT NULL, " +
                                                                    "Aufgabenbeschreibung TEXT, " +
                                                                    "Loesung TEXT NOT NULL, " +
                                                                    "FOREIGN KEY(ID) REFERENCES Aufgabe(ID)" +
                                                                    ")";

    protected static final String createTableRelation =        "CREATE TABLE Relation (" +
                                                            "Relation TEXT PRIMARY KEY NOT NULL, " +
                                                            "Relationennummer TEXT NOT NULL, " +
                                                            "FOREIGN KEY(Relationennummer) REFERENCES Relationenschema(Relationennummer)" +
                                                            ")";

    protected static final String createTableTermvereinfachung =       "CREATE TABLE Termvereinfachung (" +
                                                                    "ID INT PRIMARY KEY NOT NULL, " +
                                                                    "Term TEXT NOT NULL, " +
                                                                    "Anzahl_Argumente_der_Loesung TEXT NOT NULL, " +
                                                                    "Loesung TEXT NOT NULL, " +
                                                                    "FOREIGN KEY(ID) REFERENCES Aufgabe(ID)" +
                                                                    ")";

    protected static final String createTableNormalformen =        "CREATE TABLE Normalformen (" +
                                                                "ID INT PRIMARY KEY NOT NULL, " +
                                                                "Art_der_Normalform TEXT NOT NULL, " +
                                                                "Term TEXT NOT NULL, " +
                                                                "Anzahl_Argumente_der_Loesung TEXT NOT NULL, " +
                                                                "Loesung TEXT NOT NULL, " +
                                                                "FOREIGN KEY(ID) REFERENCES Aufgabe(ID)" +
                                                                ")";

    protected static final String createTableWahrheitstabellen =       "CREATE TABLE Wahrheitstabellen (" +
                                                                    "ID INT PRIMARY KEY NOT NULL, " +
                                                                    "Anzahl_Argumente TEXT NOT NULL, " +
                                                                    "Term TEXT NOT NULL, " +
                                                                    "FOREIGN KEY(ID) REFERENCES Aufgabe(ID)" +
                                                                    ")";

    ArrayList<String> inserts = new ArrayList<String>();

    public SQLQuerries (){
        inserts.add("INSERT INTO Aufgabe VALUES (1, '1', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (2, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (3, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (4, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (5, '3', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (6, '3', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (7, '1', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (8, '1', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (9, '1', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (10, '1', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (11, '3', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (12, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (13, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (14, '1', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (15, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (16, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (17, '3', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (18, '3', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (19, '1', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (20, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (21, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (22, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (23, '2', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (24, '3', 'Formulieren Sie folgende Fragestellung mit Hilfe der Relationenalgebra:', 'Selektion: \n Bei der Selektion werden diejenigen Tupel einer Relation ausgewählt, die eine Selektionsbedingungerfüllen. \n\n Beispiel: \n  σ Gehalt = 5000 (Pers) \n Projektion: Bei der Projektion werden Spalten (Attribute) der Argumentrelation extrahiert. \n\n Beispiel: \n  π Gehalt (Pers) \n Join: \n Bei dem Join werden Datensätze miteinander verknüpft. Es gehen alle Datensätze verloren, die keinen Verbundpartner in der anderen Relation besitzen. \n\n Beispiel: \n π Gehalt, ANR (Pers ⨝ Abteilung) \n Outer Join: \n Die Tupel beider Argumentrelationen bleiben erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟗Abteilung) \n Left Outer Join: \n Die Tupel der linken Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟕ Abteilung) \n Right Outer Join: \n Die Tupel der rechten Argumentrelation bleibt erhalten. \n\n Beispiel: \n π Gehalt, ANR (Pers ⟖ Abteilung)')");
        inserts.add("INSERT INTO Aufgabe VALUES (25, '1', 'Vereinfachen Sie folgenden Term so weit wie möglich:', 'Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Rechenregeln: \n Kommutativgesetz: \n a+b = b+a \n a*b = b*a \n Distributivgesetz: \n a * (b + c) = a*b + a*c \n a + (b*c) = (a+b) * (a+c) \n Inverse: \n a + ¬a = 1 \n a * ¬a = 0 \n Einselement: \n a + 0 = a und a + 1 = 1 \n a * 1 = a und a * 0  = 0 \n Assoziativgesetz: \n a + (b + c) = (a + b) + c \n a * (b * c) = (a * b) * c \n Negation: \n ¬1 = 0 \n ¬0 = 1 \n Idempotenzgesetz: \n a + a = a \n a * a = a \n De Morgan Gesetz: \n ¬(a + b) = ¬a * ¬b \n ¬(a * b) = ¬a + ¬b \n Absorptionsgesetz: \n a * (a + b) = a \n a + a * b = a \n Folgerungen aus dem Distributivgesetz: \n a * (¬a + b) = a * b \n a + ¬a * b = a + b ')");
        inserts.add("INSERT INTO Aufgabe VALUES (26, '1', 'Vereinfachen Sie folgenden Term so weit wie möglich:', 'Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Rechenregeln: \n Kommutativgesetz: \n a+b = b+a \n a*b = b*a \n Distributivgesetz: \n a * (b + c) = a*b + a*c \n a + (b*c) = (a+b) * (a+c) \n Inverse: \n a + ¬a = 1 \n a * ¬a = 0 \n Einselement: \n a + 0 = a und a + 1 = 1 \n a * 1 = a und a * 0  = 0 \n Assoziativgesetz: \n a + (b + c) = (a + b) + c \n a * (b * c) = (a * b) * c \n Negation: \n ¬1 = 0 \n ¬0 = 1 \n Idempotenzgesetz: \n a + a = a \n a * a = a \n De Morgan Gesetz: \n ¬(a + b) = ¬a * ¬b \n ¬(a * b) = ¬a + ¬b \n Absorptionsgesetz: \n a * (a + b) = a \n a + a * b = a \n Folgerungen aus dem Distributivgesetz: \n a * (¬a + b) = a * b \n a + ¬a * b = a + b ')");
        inserts.add("INSERT INTO Aufgabe VALUES (27, '3', 'Vereinfachen Sie folgenden Term so weit wie möglich:', 'Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Rechenregeln: \n Kommutativgesetz: \n a+b = b+a \n a*b = b*a \n Distributivgesetz: \n a * (b + c) = a*b + a*c \n a + (b*c) = (a+b) * (a+c) \n Inverse: \n a + ¬a = 1 \n a * ¬a = 0 \n Einselement: \n a + 0 = a und a + 1 = 1 \n a * 1 = a und a * 0  = 0 \n Assoziativgesetz: \n a + (b + c) = (a + b) + c \n a * (b * c) = (a * b) * c \n Negation: \n ¬1 = 0 \n ¬0 = 1 \n Idempotenzgesetz: \n a + a = a \n a * a = a \n De Morgan Gesetz: \n ¬(a + b) = ¬a * ¬b \n ¬(a * b) = ¬a + ¬b \n Absorptionsgesetz: \n a * (a + b) = a \n a + a * b = a \n Folgerungen aus dem Distributivgesetz: \n a * (¬a + b) = a * b \n a + ¬a * b = a + b ')");
        inserts.add("INSERT INTO Aufgabe VALUES (28, '2', 'Vereinfachen Sie folgenden Term so weit wie möglich:', 'Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Rechenregeln: \n Kommutativgesetz: \n a+b = b+a \n a*b = b*a \n Distributivgesetz: \n a * (b + c) = a*b + a*c \n a + (b*c) = (a+b) * (a+c) \n Inverse: \n a + ¬a = 1 \n a * ¬a = 0 \n Einselement: \n a + 0 = a und a + 1 = 1 \n a * 1 = a und a * 0  = 0 \n Assoziativgesetz: \n a + (b + c) = (a + b) + c \n a * (b * c) = (a * b) * c \n Negation: \n ¬1 = 0 \n ¬0 = 1 \n Idempotenzgesetz: \n a + a = a \n a * a = a \n De Morgan Gesetz: \n ¬(a + b) = ¬a * ¬b \n ¬(a * b) = ¬a + ¬b \n Absorptionsgesetz: \n a * (a + b) = a \n a + a * b = a \n Folgerungen aus dem Distributivgesetz: \n a * (¬a + b) = a * b \n a + ¬a * b = a + b ')");
        inserts.add("INSERT INTO Aufgabe VALUES (29, '3', 'Vereinfachen Sie folgenden Term so weit wie möglich:', 'Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Rechenregeln: \n Kommutativgesetz: \n a+b = b+a \n a*b = b*a \n Distributivgesetz: \n a * (b + c) = a*b + a*c \n a + (b*c) = (a+b) * (a+c) \n Inverse: \n a + ¬a = 1 \n a * ¬a = 0 \n Einselement: \n a + 0 = a und a + 1 = 1 \n a * 1 = a und a * 0  = 0 \n Assoziativgesetz: \n a + (b + c) = (a + b) + c \n a * (b * c) = (a * b) * c \n Negation: \n ¬1 = 0 \n ¬0 = 1 \n Idempotenzgesetz: \n a + a = a \n a * a = a \n De Morgan Gesetz: \n ¬(a + b) = ¬a * ¬b \n ¬(a * b) = ¬a + ¬b \n Absorptionsgesetz: \n a * (a + b) = a \n a + a * b = a \n Folgerungen aus dem Distributivgesetz: \n a * (¬a + b) = a * b \n a + ¬a * b = a + b ')");
        inserts.add("INSERT INTO Aufgabe VALUES (30, '1', 'Wandeln Sie folgende Formel in die Disjunktive Normalform um:', 'Die zu erstellende Normalformen aus der Aufgabe ist zu beachten. Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Dies ist allerdings nur bei Zwischenergebnissen möglich, die keine Implikation oder Äquivalenz mehr besitzen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Beispiele: \n Disjunktive Normalform: \n a*¬b + b*¬c + ¬a*c \n Kanonische Disjunktive Normalform: \n a*¬b*c + b*¬c*a + ¬a*c*b \n Konjunktive Normalform: \n (a+¬b) * (b+¬c) * (¬a+c) \n Kanonische Konjunktive Normalform: \n (a+¬b+c) * (b+¬c+a) * (¬a+c+b)')");
        inserts.add("INSERT INTO Aufgabe VALUES (31, '2', 'Wandeln Sie folgende Formel in die kanonische Disjunktive Normalform um:', 'Die zu erstellende Normalformen aus der Aufgabe ist zu beachten. Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Dies ist allerdings nur bei Zwischenergebnissen möglich, die keine Implikation oder Äquivalenz mehr besitzen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Beispiele: \n Disjunktive Normalform: \n a*¬b + b*¬c + ¬a*c \n Kanonische Disjunktive Normalform: \n a*¬b*c + b*¬c*a + ¬a*c*b \n Konjunktive Normalform: \n (a+¬b) * (b+¬c) * (¬a+c) \n Kanonische Konjunktive Normalform: \n (a+¬b+c) * (b+¬c+a) * (¬a+c+b)')");
        inserts.add("INSERT INTO Aufgabe VALUES (32, '1', 'Wandeln Sie folgende Formel in die Konjunktive Normalform um:', 'Die zu erstellende Normalformen aus der Aufgabe ist zu beachten. Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Dies ist allerdings nur bei Zwischenergebnissen möglich, die keine Implikation oder Äquivalenz mehr besitzen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Beispiele: \n Disjunktive Normalform: \n a*¬b + b*¬c + ¬a*c \n Kanonische Disjunktive Normalform: \n a*¬b*c + b*¬c*a + ¬a*c*b \n Konjunktive Normalform: \n (a+¬b) * (b+¬c) * (¬a+c) \n Kanonische Konjunktive Normalform: \n (a+¬b+c) * (b+¬c+a) * (¬a+c+b)')");
        inserts.add("INSERT INTO Aufgabe VALUES (33, '2', 'Wandeln Sie folgende Formel in die kanonische Konjunktive Normalform um:', 'Die zu erstellende Normalformen aus der Aufgabe ist zu beachten. Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Dies ist allerdings nur bei Zwischenergebnissen möglich, die keine Implikation oder Äquivalenz mehr besitzen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Beispiele: \n Disjunktive Normalform: \n a*¬b + b*¬c + ¬a*c \n Kanonische Disjunktive Normalform: \n a*¬b*c + b*¬c*a + ¬a*c*b \n Konjunktive Normalform: \n (a+¬b) * (b+¬c) * (¬a+c) \n Kanonische Konjunktive Normalform: \n (a+¬b+c) * (b+¬c+a) * (¬a+c+b)')");
        inserts.add("INSERT INTO Aufgabe VALUES (34, '1', 'Wandeln Sie folgende Formel in die kanonische Konjunktive Normalform um:', 'Die zu erstellende Normalformen aus der Aufgabe ist zu beachten. Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Dies ist allerdings nur bei Zwischenergebnissen möglich, die keine Implikation oder Äquivalenz mehr besitzen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Beispiele: \n Disjunktive Normalform: \n a*¬b + b*¬c + ¬a*c \n Kanonische Disjunktive Normalform: \n a*¬b*c + b*¬c*a + ¬a*c*b \n Konjunktive Normalform: \n (a+¬b) * (b+¬c) * (¬a+c) \n Kanonische Konjunktive Normalform: \n (a+¬b+c) * (b+¬c+a) * (¬a+c+b)')");
        inserts.add("INSERT INTO Aufgabe VALUES (35, '3', 'Wandeln Sie folgende Formel in die kanonische Disjunktive Normalform um:', 'Die zu erstellende Normalformen aus der Aufgabe ist zu beachten. Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Dies ist allerdings nur bei Zwischenergebnissen möglich, die keine Implikation oder Äquivalenz mehr besitzen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Beispiele: \n Disjunktive Normalform: \n a*¬b + b*¬c + ¬a*c \n Kanonische Disjunktive Normalform: \n a*¬b*c + b*¬c*a + ¬a*c*b \n Konjunktive Normalform: \n (a+¬b) * (b+¬c) * (¬a+c) \n Kanonische Konjunktive Normalform: \n (a+¬b+c) * (b+¬c+a) * (¬a+c+b)')");
        inserts.add("INSERT INTO Aufgabe VALUES (36, '1', 'Wandeln Sie folgende Formel in die kanonische Disjunktive Normalform um:', 'Die zu erstellende Normalformen aus der Aufgabe ist zu beachten. Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Dies ist allerdings nur bei Zwischenergebnissen möglich, die keine Implikation oder Äquivalenz mehr besitzen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Beispiele: \n Disjunktive Normalform: \n a*¬b + b*¬c + ¬a*c \n Kanonische Disjunktive Normalform: \n a*¬b*c + b*¬c*a + ¬a*c*b \n Konjunktive Normalform: \n (a+¬b) * (b+¬c) * (¬a+c) \n Kanonische Konjunktive Normalform: \n (a+¬b+c) * (b+¬c+a) * (¬a+c+b)')");
        inserts.add("INSERT INTO Aufgabe VALUES (37, '3', 'Wandeln Sie folgende Formel in die kanonische Konjunktive Normalform um:', 'Die zu erstellende Normalformen aus der Aufgabe ist zu beachten. Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Dies ist allerdings nur bei Zwischenergebnissen möglich, die keine Implikation oder Äquivalenz mehr besitzen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Beispiele: \n Disjunktive Normalform: \n a*¬b + b*¬c + ¬a*c \n Kanonische Disjunktive Normalform: \n a*¬b*c + b*¬c*a + ¬a*c*b \n Konjunktive Normalform: \n (a+¬b) * (b+¬c) * (¬a+c) \n Kanonische Konjunktive Normalform: \n (a+¬b+c) * (b+¬c+a) * (¬a+c+b)')");
        inserts.add("INSERT INTO Aufgabe VALUES (38, '3', 'Wandeln Sie folgende Formel in die kanonische Disjunktive Normalform um:', 'Die zu erstellende Normalformen aus der Aufgabe ist zu beachten. Stellen Sie das Ergebnis ausschließlich mit klein geschriebenen Variablen dar. \n Sie haben die Möglichkeit, ihr Zwischenergebnis überprüfen zu lassen. Dies ist allerdings nur bei Zwischenergebnissen möglich, die keine Implikation oder Äquivalenz mehr besitzen. Das Endergebnis wird erst dann als korrekt akzeptiert, wenn es vollständig gekürzt eingeben wird. \n\n Beispiele: \n Disjunktive Normalform: \n a*¬b + b*¬c + ¬a*c \n Kanonische Disjunktive Normalform: \n a*¬b*c + b*¬c*a + ¬a*c*b \n Konjunktive Normalform: \n (a+¬b) * (b+¬c) * (¬a+c) \n Kanonische Konjunktive Normalform: \n (a+¬b+c) * (b+¬c+a) * (¬a+c+b)')");
        inserts.add("INSERT INTO Aufgabe VALUES (39, '1', 'Erstellen Sie eine Wertetabelle für folgenden Term:', 'Wählen sie jeweils des Ergebnis zu den gegeben Wertekombination aus, indem Sie auf die dafür vorgesehene Fläche drücken.')");
        inserts.add("INSERT INTO Aufgabe VALUES (40, '1', 'Erstellen Sie eine Wertetabelle für folgenden Term:', 'Wählen sie jeweils des Ergebnis zu den gegeben Wertekombination aus, indem Sie auf die dafür vorgesehene Fläche drücken.')");
        inserts.add("INSERT INTO Aufgabe VALUES (41, '3', 'Erstellen Sie eine Wertetabelle für folgenden Term:', 'Wählen sie jeweils des Ergebnis zu den gegeben Wertekombination aus, indem Sie auf die dafür vorgesehene Fläche drücken.')");
        inserts.add("INSERT INTO Aufgabe VALUES (42, '2', 'Erstellen Sie eine Wertetabelle für folgenden Term:', 'Wählen sie jeweils des Ergebnis zu den gegeben Wertekombination aus, indem Sie auf die dafür vorgesehene Fläche drücken.')");
        inserts.add("INSERT INTO Aufgabe VALUES (43, '3', 'Erstellen Sie eine Wertetabelle für folgenden Term:', 'Wählen sie jeweils des Ergebnis zu den gegeben Wertekombination aus, indem Sie auf die dafür vorgesehene Fläche drücken.')");
        inserts.add("INSERT INTO Relationenschema VALUES (1, '1', 'Geben Sie die Titel der Bücher an, die im Jahr 2010 erschienen sind und mehr als 300 Seiten haben.', 'π(Titel(σ(Jahr=2010∧AnzahlSeiten>300(Buch))')");
        inserts.add("INSERT INTO Relationenschema VALUES (2, '1', 'Geben Sie die Verlagsnamen an, die in München ihren Sitz haben und ein Buch von „Müller“ veröffentlicht haben.', 'π(VerlagName(σ(Verlagort=„München“∧Autor=„Müller“(Buch⨝Verlag))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (3, '1', 'Geben Sie den Titel und das Veröffentlichungsjahr aller Bücher an, die zwischen 2005 und 2006 ausgeliehen wurden.', 'π(Titel,Jahr(σ(VonDatum>=2015∧VonDatum<=2016(Buch⨝Ausgeliehen))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (4, '1', 'Geben Sie alle Namen aller Personen an, die aus Heilbronn oder Augsburg kommen und das Buch „Faust“ im Jahr 2010 ausgeliehen hatten.', 'π(Name(σ(Ort=„Heilbronn“∨Ort=„Augsburg“)∧Titel=„Faust“∧VonDatum= 2010(Ausleiher⨝Ausgeliehen⨝Buch)))')");
        inserts.add("INSERT INTO Relationenschema VALUES (5, '1', 'Geben Sie die Titel der Bücher an, die in Ravensburg veröffentlicht und von „Mayer“ nach 2006 ausgeliehen wurden.', 'π(Titel(σ(Verlagort=„Ravensburg“∧Name=„Mayer“∧VonDatum>2006(Buch⨝Ausgeliehen⨝Ausleiher⨝Verlag))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (6, '1', 'Geben Sie den Titel aller Bücher an, die noch nie ausgeliehen wurden.', 'π(Titel(σ(ID=„“(Buch⟕Ausgeliehen))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (7, '2', 'Geben Sie alle Kennzeichen von den angebotenen Cabrios aus.', 'π(Kennzeichen(σ(Typ=„Cabrio“(Auto))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (8, '2', 'Geben Sie alle Hersteller (Name) an, die Limousinen herstellen.', 'π(Name(σ(Typ=„Limousine“(Hersteller⨝Auto))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (9, '2', 'Geben Sie alle Vermietungen für das Auto mit dem Kennzeichen „RV-DH-2017“ aus.', 'σ(Kennzeichen=„RV-DH-2017“(Vermietung))')");
        inserts.add("INSERT INTO Relationenschema VALUES (10, '2', 'Geben Sie alle Autos (Kennzeichen) an, die mindestens 1 mal vermietet wurden.', 'π(Kennzeichen(Auto⨝Vermietung))')");
        inserts.add("INSERT INTO Relationenschema VALUES (11, '2', 'Geben Sie alle bisher unvermieteten Fahrzeuge aus.', 'σ(KID=„“(Auto⟕Vermietung))')");
        inserts.add("INSERT INTO Relationenschema VALUES (12, '2', 'Geben Sie alle Vermietungen von Cabrios im Zeitraum 01.04.2017 – 30.06.2017 aus.', 'σ(Typ=„Cabrio“∧Beginn=„01.04.2017“∧Ende=„30.06.2017“(Auto⨝Vermietung))')");
        inserts.add("INSERT INTO Relationenschema VALUES (13, '2', 'Geben Sie die Namen aller Kunden aus, die bereits 1 Auto gemietet haben und in Ravensburg wohnen.', 'π(Name(σ(Wohnort=„Ravensburg“(Kunden⨝Vermietung))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (14, '3', 'Geben Sie alle PC-Modell aus, die mind. 1 CPU-Geschwindigkeit von 2000 MHz aufweisen.', 'σ(CPU=2000MHz(PC))')");
        inserts.add("INSERT INTO Relationenschema VALUES (15, '3', 'Geben Sie alle Hersteller aus, die Laptops mit einer Mindestfestplattengröße von 128 GB anbieten.', 'π(Hersteller(σ(HD>=128GB(Produkt⨝PC))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (16, '3', 'Geben Sie alle Laptopmodell aus, die mindestens 1 mal verkauft wurden.', 'π(Modell(Laptop⨝Aufträge))')");
        inserts.add("INSERT INTO Relationenschema VALUES (17, '3', 'Geben Sie alle PCs aus, die noch nie verkauft wurden.', 'σ(Auftragsnummer=““(PC⟖Aufträge))')");
        inserts.add("INSERT INTO Relationenschema VALUES (18, '3', 'Finden Sie die Modellnummer und den Preis aller Produkte vom Hersteller Apple.', 'π(Preis,Modell(σ(Hersteller=„Apple“(Produkt⨝PC⨝Laptop⨝Drucker))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (19, '4', 'Geben Sie den Namen aller Fluggesellschaften aus.', 'π(Name(Fluggesellschaft))')");
        inserts.add("INSERT INTO Relationenschema VALUES (20, '4', 'Geben Sie die Flugnummern aus, deren Flüge länger als 5 Stunden dauern.', 'π(Flugnummer(σ(Dauer>5(Flugplan⨝Flüge))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (21, '4', 'Geben Sie die Flugnummern aus, deren Flüge in USD verrechnet werden.', 'π(Flugnummer(σ(Währung=„USD“(Fluggesellschaft⨝Flüge))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (22, '4', 'Geben Sie alle Fluggesellschaften (Name) aus, die am 09.12.2017 nach Chicago fliegen.', 'π(Name(σ(Datum=09.12.2017∧Ankunftsort=„Chicago“(Fluggesellschaft⨝Flugplan⨝Flüge))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (23, '4', 'Geben Sie alle Flugnummern aus, die Flüge von Frankfurt nach New York durchführen.', 'π(Flugnummer(σ(Abflugort=„Frankfurt“∧Ankunftsort=„NewYork“(Flugplan))))')");
        inserts.add("INSERT INTO Relationenschema VALUES (24, '4', 'Geben Sie die Namen aller Fluggesellschaften aus, die keinen Flug anbieten.', 'π(Name(σ(Flugnummer=„“(Fluggesellschaft⟖Flüge))))')");
        inserts.add("INSERT INTO Relation VALUES ('Buch(Signatur, ISBN, Titel, Autor, Jahr, VerlagID, AnzahlSeiten)', '1')");
        inserts.add("INSERT INTO Relation VALUES ('Verlag(VerlagID, VerlagName, Verlagort)', '1')");
        inserts.add("INSERT INTO Relation VALUES ('Ausleiher(ID, Name, Geburtsdatum, Ort)', '1')");
        inserts.add("INSERT INTO Relation VALUES ('Ausgeliehen(Signatur, ID, VonDatum, BisDatum)', '1')");
        inserts.add("INSERT INTO Relation VALUES ('Auto (Kennzeichen, Bezeichnung, Leistung, Typ, HID)', '2')");
        inserts.add("INSERT INTO Relation VALUES ('Hersteller (HID, Name, Ort)', '2')");
        inserts.add("INSERT INTO Relation VALUES ('Kunden (KID, Name, Vorname, Geburtsdatum, Wohnort)', '2')");
        inserts.add("INSERT INTO Relation VALUES ('Vermietung (KID, Kennzeichen, Beginn, Ende)', '2')");
        inserts.add("INSERT INTO Relation VALUES ('Produkt (Hersteller, Modell, Typ)', '3')");
        inserts.add("INSERT INTO Relation VALUES ('PC (Modell, CPU, RAM, HD, Preis)', '3')");
        inserts.add("INSERT INTO Relation VALUES ('Laptop (Modell, CPU, RAM, HD, Displaygröße, Preis)', '3')");
        inserts.add("INSERT INTO Relation VALUES ('Drucker (Modell, Farbe, Druckverfahren, Preis)', '3')");
        inserts.add("INSERT INTO Relation VALUES ('Aufträge (Auftragsnummer, Modell, Datum, Menge, Lieferscheinnummer)', '3')");
        inserts.add("INSERT INTO Relation VALUES ('Fluggesellschaft (FKürzel, Name, Währung)', '4')");
        inserts.add("INSERT INTO Relation VALUES ('Flugplan (Flugnummer, FKürzel, Abflugort, Ankunftsort, Dauer)', '4')");
        inserts.add("INSERT INTO Relation VALUES ('Flüge (FKürzel, Flugnummer, Datum, Preis)', '4')");
        inserts.add("INSERT INTO Termvereinfachung VALUES (25, '( a + ¬(b*a)) * (c+(d+c))', '2', 'c+d')");
        inserts.add("INSERT INTO Termvereinfachung VALUES (26, '¬a + ¬(a + ¬a*b) + ¬(¬a + b)', '5', '¬a + ¬b')");
        inserts.add("INSERT INTO Termvereinfachung VALUES (27, 'b* ¬(a*b) * ¬(a*b*c) * ¬(¬a*(b + c + b*¬c))', '0', '0')");
        inserts.add("INSERT INTO Termvereinfachung VALUES (28, 'a + ¬b * (a + ¬(b*c)) + ¬(a*b + a*b)', '0', '1')");
        inserts.add("INSERT INTO Termvereinfachung VALUES (29, 'a * ¬b + (a * ¬(b*c)) * ¬(a*b * a*b)', '2', 'a*¬b')");
        inserts.add("INSERT INTO Normalformen VALUES (30, 'Disjunktive Normalform ', '((a → c) → b) ', '7', 'b*¬c + b + a*¬c + a*b')");
        inserts.add("INSERT INTO Normalformen VALUES (31, 'kanonische disjunktive Normalform ', '((a → c) → b) ', '15', 'b*¬c*a + b*¬c*¬a + b*a*c + b*¬a*c + a*¬c*¬b')");
        inserts.add("INSERT INTO Normalformen VALUES (32, 'konjunktive Normalform ', '((a → c) → b) ', '4', 'b+a * ¬c+b')");
        inserts.add("INSERT INTO Normalformen VALUES (33, 'kanonische konjunktive Normalform ', '((a → c) → b) ', '9', '(b+a+c) * (b+a+¬c) * (¬c+b+¬a)')");
        inserts.add("INSERT INTO Normalformen VALUES (34, 'kanonische konjunktive Normalform ', '¬(a*(b*c))', '3', '¬a + ¬b + ¬c')");
        inserts.add("INSERT INTO Normalformen VALUES (35, 'kanonische disjunktive Normalform ', '¬(a*(b*c))', '21', '¬a*b*c + ¬a*b*¬c + ¬a*¬b*c + ¬a*¬b*¬c + ¬b*a*c + ¬b*a*¬c + ¬c*a*b')");
        inserts.add("INSERT INTO Normalformen VALUES (36, 'kanonische disjunktive Normalform ', '¬(b → (c → a))', '3', 'b*c*¬a')");
        inserts.add("INSERT INTO Normalformen VALUES (37, 'kanonische konjunktive Normalform ', '¬(b → (c → a))', '21', '(b+a+c) * (b+a+¬c) * (b+¬a+c) * (b+¬a+¬c) * (c+¬b+a) * (c+¬b+¬a) * (¬a+¬b+¬c)')");
        inserts.add("INSERT INTO Normalformen VALUES (38, 'kanonische disjunktive Normalform ', 'c → (a ↔ b)', '18', '¬c*a*b + ¬c*a*¬b + ¬c*¬a*b + ¬c*¬a*¬b + ¬a*¬b*c + b*a*c')");
        inserts.add("INSERT INTO Wahrheitstabellen VALUES (39, '3', '¬(A*B) + (A*C)')");
        inserts.add("INSERT INTO Wahrheitstabellen VALUES (40, '3', '¬(A+B) * (A+C)')");
        inserts.add("INSERT INTO Wahrheitstabellen VALUES (41, '3', '¬ (B+C ) * (¬A+B) ')");
        inserts.add("INSERT INTO Wahrheitstabellen VALUES (42, '3', '(¬A*C) + (B*¬C)')");
        inserts.add("INSERT INTO Wahrheitstabellen VALUES (43, '3', '(A*B*C) * (B+¬C)')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (1, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (2, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (3, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (4, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (5, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (6, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (7, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (8, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (9, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (10, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (11, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (12, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (13, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (14, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (15, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (16, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (17, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (18, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (19, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (20, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (21, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (22, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (23, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (24, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (25, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (26, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (27, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (28, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (29, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (30, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (31, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (32, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (33, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (34, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (35, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (36, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (37, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (38, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (39, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (40, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (41, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (42, 'Offen', 0, 'Root')");
        inserts.add("INSERT INTO Aufgabenzustand VALUES (43, 'Offen', 0, 'Root')");







    }



}
